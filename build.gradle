/*
 * Copyright 2020-2021 Exactpro (Exactpro Systems Limited)
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

plugins {
    id 'maven-publish'
    id "io.github.gradle-nexus.publish-plugin" version "1.0.0"
    id 'signing'
    id 'com.palantir.docker' version '0.25.0'
    id 'org.jetbrains.kotlin.jvm' version "${kotlin_version}"
    id 'org.jetbrains.kotlin.kapt' version "${kotlin_version}"
}

apply plugin: 'kotlin'
apply plugin: 'application'
apply plugin: 'maven-publish'
apply plugin: 'com.palantir.docker'


ext {
    sharedDir = file("${project.rootDir}/shared")
}

group = 'com.exactpro.th2'
version = release_version

sourceCompatibility = 11
targetCompatibility = 11

repositories {
    mavenCentral()
    maven {
        name 'Sonatype_snapshots'
        url 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
    }
    maven {
        name 'Sonatype_releases'
        url 'https://s01.oss.sonatype.org/content/repositories/releases/'
    }

    configurations.all {
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
        resolutionStrategy.cacheDynamicVersionsFor 0, 'seconds'
    }
}

jar {
    manifest {
        attributes(
                'Created-By': "${System.getProperty('java.version')} (${System.getProperty('java.vendor')})",
                'Specification-Title': '',
                'Specification-Vendor': 'Exactpro Systems LLC',
                'Implementation-Title': project.archivesBaseName,
                'Implementation-Vendor': 'Exactpro Systems LLC',
                'Implementation-Vendor-Id': 'com.exactpro',
                'Implementation-Version': project.version,
                'Main-Class':'com.exactpro.th2.httpserver.Main'
        )
    }
}

java {
    withJavadocJar()
    withSourcesJar()
}

// conditionals for publications
tasks.withType(PublishToMavenRepository) {
    onlyIf {
        (repository == publishing.repositories.nexusRepository &&
                project.hasProperty('nexus_user') &&
                project.hasProperty('nexus_password') &&
                project.hasProperty('nexus_url')) ||
                (repository == publishing.repositories.sonatype &&
                        project.hasProperty('sonatypeUsername') &&
                        project.hasProperty('sonatypePassword')) ||
                (repository == publishing.repositories.localRepo)
    }
}
tasks.withType(Sign) {
    onlyIf { project.hasProperty('signingKey') &&
            project.hasProperty('signingPassword')
    }
}
// disable running task 'initializeSonatypeStagingRepository' on a gitlab
tasks.whenTaskAdded {task ->
    if(task.name.equals('initializeSonatypeStagingRepository') &&
            !(project.hasProperty('sonatypeUsername') && project.hasProperty('sonatypePassword'))
    ) {
        task.enabled = false
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from(components.java)
            pom {
                name = rootProject.name
                packaging = 'jar'
                description = rootProject.description
                url = vcs_url
                scm {
                    url = vcs_url
                }
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'developer'
                        name = 'developer'
                        email = 'developer@exactpro.com'
                    }
                }
                scm {
                    url = vcs_url
                }
            }
        }
    }
    repositories {
        maven {
            name = 'localRepo'
            url = sharedDir
        }
//Nexus repo to publish from gitlab
        maven {
            name = 'nexusRepository'
            credentials {
                username = project.findProperty('nexus_user')
                password = project.findProperty('nexus_password')
            }
            url = project.findProperty('nexus_url')
        }
    }
}

nexusPublishing {
    repositories {
        sonatype {
            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
            snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
        }
    }
}

signing {
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.mavenJava
}

dependencies {
    api platform('com.exactpro.th2:bom:4.1.0')

    implementation 'com.exactpro.th2:common:5.1.0-dev-version-5+'

    implementation 'org.slf4j:slf4j-api'

    implementation group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib-jdk8', version: kotlin_version
    implementation group: 'org.jetbrains.kotlin', name: 'kotlin-reflect', version: kotlin_version
    implementation group: 'io.github.microutils', name: 'kotlin-logging', version: '1.7.9'
    implementation group: 'com.athaydes.rawhttp', name: 'rawhttp-core', version: '2.4.1'
    implementation group: 'com.fasterxml.jackson.module', name: 'jackson-module-kotlin', version: '2.11.2'

    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter', version: '5.6.0'

    compileOnly 'com.google.auto.service:auto-service:1.0.1'
    annotationProcessor 'com.google.auto.service:auto-service:1.0.1'
    kapt 'com.google.auto.service:auto-service:1.0.1'
}

dependencyLocking {
    lockAllConfigurations()
}

application {
    mainClassName 'com.exactpro.th2.httpserver.Main'
}

applicationName = 'service'

distTar {
    archiveName "${applicationName}.tar"
}

dockerPrepare {
    dependsOn distTar
}

docker {
    copySpec.from(tarTree("$buildDir/distributions/${applicationName}.tar"))
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "11"
        freeCompilerArgs += "-XXLanguage:+UnitConversion"
    }
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = "11"
        freeCompilerArgs += "-XXLanguage:+UnitConversion"
    }
}

test {
    useJUnitPlatform()
}


